Exercise 1
1. Simulate the position of dart throws by two players using the following criteria:
   a) Player 1: mean x, y position = (0, 0), cov matrix = [[1, 0] [0, 2]]
   b) Player 2: mean x, y position = (2, 1), cov matrix = [[3, -2], [-2, 2]]
2. Draw contourplot displaying the joint probability distributions
3. Generate 200 samples each for both players and plot those -> use numpy.random.choice

Exercise 2
1. Label points from player 1 as 0 and points from player 2 as 1.
2. Use logistic regression from scipy to classify these points. Check performance using accuracy_score from sklearn.metrics.
3. Implement your own logistic regression by filling out the functions in the skeleton below. (#index)
   Discover tricks to make this converge faster.
4. Implement the gradient function using:
    a) The direct method - find out the actual function from the lecture slides:
    b) Numeric/analytical method by computing numeric gradients (if you've already implemented using the direct method above, then just do numeric)
5. Use any other ML method to achieve better performance - SVM, Neural Networks, etc.

#index:
**fill this out**

class LogisticRegressionCustom:
    """
    Implement the functions that have pass written.
    """
    T = 1e5
    
    def get_prob(self, X, beta):                            
        pass

    def loss(self, X, beta, y):
        pass
    
    def gradient(self, X, beta, y):
        pass
    
    def gradient_descent_fit(self, X, beta, y):
        count = 0
        beta_ = np.copy(beta)
        while count < self.T:
            count += 1
            grad = self.gradient(X, beta_, y)
            beta_ -= LR * grad
            if np.sum(np.abs(grad)) < thresh:
                break
        return beta_

    def fit(self, X, y):
        self.beta = np.zeros((X.shape[1] + 1))
        self.beta += rng.randn(X.shape[1] + 1)
        intercept_X = np.ones((X.shape[0], 1))
        self.X = np.concatenate((intercept_X, X), axis=1)
        self.y = y
        
        fitted_beta = self.grad_descent_fit(
            self.X, self.beta, self.y
        )
        self.beta = fitted_beta
        return self.beta
    
    def predict(self, X):
        pass
